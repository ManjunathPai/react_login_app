{"version":3,"sources":["service/UserDataService.js","component/ListCoursesComponent.jsx","service/AuthenticationService.js","component/LoginComponent.jsx","component/LogoutComponent.jsx","component/MenuComponent.jsx","component/AuthenticatedRoute.jsx","component/InstructorApp.jsx","App.js","serviceWorker.js","index.js"],"names":["INSTRUCTOR_API_URL","concat","service_UserDataService","name","console","log","axios","get","window","sessionStorage","getItem","username","url1","url2","Promise","all","ListCoursesComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","courses","message","pic","refreshCourses","bind","assertThisInitialized","_this2","UserDataService","retrieveAllUser","then","response","data","setState","react_default","a","createElement","className","email","profession","src","style","width","height","Component","service_AuthenticationService","password","headers","authorization","createBasicAuthToken","btoa","setItem","setupAxiosInterceptors","removeItem","user","token","interceptors","request","use","config","isUserLoggedIn","LoginComponent","hasLoginFailed","showSuccessMessage","handleChange","loginClicked","event","defineProperty","target","value","AuthenticationService","executeBasicAuthenticationService","registerSuccessfulLogin","executeUserService","history","push","catch","type","onChange","onClick","LogoutComponent","Fragment","MenuComponent","react_router_dom","to","logout","withRouter","AuthenticatedRoute","react_router","InstructorApp","component_MenuComponent","path","exact","component","component_AuthenticatedRoute","App","component_InstructorApp","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAKMA,EAAkB,GAAAC,OADD,wBACC,iBAAAA,OAHL,eAmCJC,EAAA,+GA5BQC,GAEf,OADAC,QAAQC,IAAI,mBAAqBF,GAC1BG,IAAMC,IAAN,GAAAN,OAAaD,EAAb,2DAaPI,QAAQC,IAAI,6BAA+BG,OAAOC,eAAeC,QAAQ,aACzE,IAAMC,EAAWH,OAAOC,eAAeC,QAAQ,YAC/CN,QAAQC,IAAI,oBACX,IAAMO,EAAON,IAAMC,IAAI,qCAAqCI,GACtDE,EAAOP,IAAMC,IAAI,mCAAmCI,GAC1D,OAAOG,QAAQC,IAAI,CAACH,EAAKC,cC2DnBG,cAjFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACNb,QAAQC,IAAIY,GACZC,EAAKO,MAAQ,CACTC,QAAS,GACTC,QAAS,KACTC,IAAI,IAERV,EAAKW,eAAiBX,EAAKW,eAAeC,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KARPA,mFAYfG,KAAKQ,0DAGQ,IAAAG,EAAAX,KAEbjB,QAAQC,IAAI,0BAA4BI,eAAeC,QAAQ,qCAC/DN,QAAQC,IAAI,6BAA+BG,OAAOC,eAAeC,QAAQ,aACzEuB,EAAkBC,gBAtBP,eAuBNC,KAAK,SAACC,GACHhC,QAAQC,IAAI,eAAiB+B,EAAS,GAAGC,MACzCL,EAAKM,SAAS,CAAEZ,QAASU,EAAS,GAAGC,OACrCjC,QAAQC,IAAI,iBAAmB+B,EAAS,GAAGC,MAC3CL,EAAKM,SAAS,CAACV,IAAIQ,EAAS,GAAGC,0CAcvC,OADAjC,QAAQC,IAAI,UAGRkC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAMXH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACMH,EAAAC,EAAAC,cAAA,aACfF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,2BAGRF,EAAAC,EAAAC,cAAA,aAMgBF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKpB,KAAKI,MAAMC,QAAQf,UACxB4B,EAAAC,EAAAC,cAAA,UAAKpB,KAAKI,MAAMC,QAAQiB,OACxBJ,EAAAC,EAAAC,cAAA,UAAKpB,KAAKI,MAAMC,QAAQkB,YACxBL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAMI,IAAKxB,KAAKI,MAAMG,IAAKkB,MAAO,CAACC,MAAO,IAAKC,OAAQ,KAAMN,UAAU,wBArEpFO,qCCsDpBC,EAAA,8HApDuBvC,EAAUwC,GAGxC,OAFA/C,QAAQC,IAAI,YAAcM,GAC1BP,QAAQC,IAAI,YAAc8C,GACnB7C,IAAMC,IAAN,GAAAN,OATC,wBASD,cACI,CAAEmD,QAAS,CAAEC,cAAehC,KAAKiC,qBAAqB3C,EAAUwC,iDAG5DxC,EAAUwC,GACzB,OAAO7C,IAAMC,IAAN,GAAAN,OAdC,wBAcD,gBACH,CAAEmD,QAAS,CAAEC,cAAehC,KAAKiC,qBAAqB3C,EAAUwC,mDAGnDxC,EAAUwC,GAC3B,MAAO,SAAW3C,OAAO+C,KAAK5C,EAAW,IAAMwC,mDAG3BxC,EAAUwC,GAG9B1C,eAAe+C,QAvByB,oBAuBiB7C,GACzDH,OAAOC,eAAe+C,QAAQ,WAAY7C,GAC1CU,KAAKoC,uBAAuBpC,KAAKiC,qBAAqB3C,EAAUwC,qCAIhE1C,eAAeiD,WA7ByB,8DAkCxC,OAAa,OADFjD,eAAeC,QAjCc,mEAuCxC,IAAIiD,EAAOlD,eAAeC,QAvCc,qBAwCxC,OAAa,OAATiD,EAAsB,GACnBA,iDAGYC,GAAO,IAAA1C,EAAAG,KAC1Bf,IAAMuD,aAAaC,QAAQC,IACvB,SAACC,GAIG,OAHI9C,EAAK+C,mBACLD,EAAOZ,QAAQC,cAAgBO,GAE5BI,cC+CRE,cA/FX,SAAAA,EAAYjD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6C,IACfhD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+C,GAAA1C,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTd,SAAU,GACVwC,SAAU,GACVgB,gBAAgB,EAChBC,oBAAoB,EACpBT,KAAK,IAGTzC,EAAKmD,aAAenD,EAAKmD,aAAavC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKoD,aAAepD,EAAKoD,aAAaxC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAZLA,4EAeNqD,GACTlD,KAAKiB,SAALnB,OAAAqD,EAAA,EAAArD,CAAA,GAESoD,EAAME,OAAOtE,KACRoE,EAAME,OAAOC,+CAKhB,IAAA1C,EAAAX,KAaXsD,EACKC,kCAAkCvD,KAAKI,MAAMd,SAAUU,KAAKI,MAAM0B,UAClEhB,KAAK,WACFwC,EAAsBE,wBAAwB7C,EAAKP,MAAMd,SAAUqB,EAAKP,MAAM0B,UAC9EwB,EAAsBG,mBAAmB9C,EAAKP,MAAMd,SAAUqB,EAAKP,MAAM0B,UACxEhB,KACG,SAAAC,GACIJ,EAAKM,SAAS,CAACqB,KAAKvB,EAASC,SAMtCjC,QAAQC,IAAI2B,EAAKP,MAAMkC,MACtB3B,EAAKf,MAAM8D,QAAQC,KAAnB,kBACDC,MAAM,WACLjD,EAAKM,SAAS,CAAE8B,oBAAoB,IACpCpC,EAAKM,SAAS,CAAE6B,gBAAgB,uCAgBxC,OACI5B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEVrB,KAAKI,MAAM0C,gBAAkB5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,uBAC7BrB,KAAKI,MAAM2C,oBAAsB7B,EAAAC,EAAAC,cAAA,8BAElCF,EAAAC,EAAAC,cAAA,yBACYF,EAAAC,EAAAC,cAAA,SAAOyC,KAAK,OAAO/E,KAAK,WAAWuE,MAAOrD,KAAKI,MAAMd,SAAUwE,SAAU9D,KAAKgD,gBACrF9B,EAAAC,EAAAC,cAAA,WAELF,EAAAC,EAAAC,cAAA,0BACaF,EAAAC,EAAAC,cAAA,SAAOyC,KAAK,WAAW/E,KAAK,WAAWuE,MAAOrD,KAAKI,MAAM0B,SAAUgC,SAAU9D,KAAKgD,gBAE/F9B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkB0C,QAAS/D,KAAKiD,cAAlD,mBAzFSrB,aCWdoC,mLAXP,OACI9C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8C,SAAA,KACI/C,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,gDALcO,aCExBsC,mLAGE,IAAMtB,EAAiBU,EAAsBV,iBAE7C,OACI1B,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CAKXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mDACRuB,GAAkB1B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAM9C,UAAU,WAAW+C,GAAG,UAA9B,UACvBxB,GAAkB1B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAM9C,UAAU,WAAW+C,GAAG,UAAUL,QAAST,EAAsBe,QAAvE,qBAdnBzC,aAsBb0C,cAAWJ,GCXXK,mLATP,OAAIjB,EAAsBV,iBACf1B,EAAAC,EAAAC,cAACoD,EAAA,EAAUxE,KAAKJ,OAEhBsB,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAUJ,GAAG,kBALCxC,aC2BlB6C,mLAlBP,OACIvD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8C,SAAA,KACI/C,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACIjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8C,SAAA,KACI/C,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KACItD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAOG,KAAK,IAAIC,OAAK,EAACC,UAAWhC,IACjC3B,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAOG,KAAK,SAASC,OAAK,EAACC,UAAWhC,IACtC3B,EAAAC,EAAAC,cAAC0D,EAAD,CAAoBH,KAAK,UAAUC,OAAK,EAACC,UAAWb,IACpD9C,EAAAC,EAAAC,cAAC0D,EAAD,CAAoBH,KAAK,eAAeC,OAAK,EAACC,UAAWlF,eAbzDiC,aCKbmD,mLARX,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC4D,EAAD,cAJUpD,aCQEqD,QACW,cAA7B9F,OAAO+F,SAASC,UAEe,UAA7BhG,OAAO+F,SAASC,UAEhBhG,OAAO+F,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,KAAK,SAAA+E,GACjCA,EAAaC","file":"static/js/main.28ac1611.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst INSTRUCTOR = 'in28minutes'\nconst PASSWORD = 'dummy'\nconst COURSE_API_URL = 'http://localhost:8082'\nconst INSTRUCTOR_API_URL = `${COURSE_API_URL}/instructors/${INSTRUCTOR}`\n\nclass UserDataService {\n\n    retrieveAllCourses(name) {\n        console.log('executed service' + name)\n        return axios.get(`${INSTRUCTOR_API_URL}/userdetails`,\n        );\n    }\n\n    // retrieveAllUser() {\n    //     console.log(\"inside refresh courses  2 \" + window.sessionStorage.getItem(\"username\"))\n    //     const username = window.sessionStorage.getItem(\"username\");\n    //     console.log('executed service')\n    //     return axios.get(`http://localhost:8082/userDetails/`+username,\n    //     );\n    // }\n\n    retrieveAllUser() {\n        console.log(\"inside refresh courses  2 \" + window.sessionStorage.getItem(\"username\"))\n        const username = window.sessionStorage.getItem(\"username\");\n        console.log('executed service')\n         const url1 = axios.get(`http://localhost:8082/userDetails/`+username,);\n         const url2 = axios.get(`http://localhost:8082/api/image/`+username,);\n         return Promise.all([url1,url2]);\n        //  return axios.get(`http://localhost:8082/api/image/`+username,\n        //  );\n        // return axios.get(`http://localhost:8082/userDetails/`+username,\n        // );\n    }\n}\n\nexport default new UserDataService()\n","import React, { Component } from 'react'\nimport UserDataService from '../service/UserDataService.js';\nimport axios from 'axios'\n\nconst INSTRUCTOR = 'in28minutes'\n\nclass ListCoursesComponent extends Component {\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.state = {\n            courses: [],\n            message: null,\n            pic:[]\n        }\n        this.refreshCourses = this.refreshCourses.bind(this)\n    }\n\n    componentDidMount() {\n        this.refreshCourses();\n    }\n\n    refreshCourses() {\n        //UserDataService.retrieveAllCourses(INSTRUCTOR)//HARDCODED\n        console.log(\"inside refresh courses \" + sessionStorage.getItem(\"USER_NAME_SESSION_ATTRIBUTE_NAME\") )\n        console.log(\"inside refresh courses  2 \" + window.sessionStorage.getItem(\"username\"))\n        UserDataService.retrieveAllUser(INSTRUCTOR)\n            .then((response) =>{\n                console.log(\"response is \" + response[0].data)\n                this.setState({ courses: response[0].data })\n                console.log(\"response 2 is \" + response[1].data)\n                this.setState({pic:response[1].data})\n            }\n            \n            //         console.log(response.data)\n\n            //         this.setState({ courses: response.data })\n            //     }\n            // )\n            )\n    }\n\n\n    render() {\n        console.log('render')\n        return (\n           \n            <div className=\"container\">\n                {/* <img style={{width: 175, height: 175}} className='tc br3' alt='none' src={this.state.pic}/> */}\n                {/* <div style={{width: 520,padding: 10}}>\n                <img src={this.state.pic} width=\"250px\" height=\"auto\"/>\n                </div> */}\n                \n                <h3>Please find your details</h3>\n                <div className=\"container\">\n                    <table className=\"table\">\n                                           <thead>\n                            <tr>\n                                <th>First Name</th>\n                                {/* <th>Last Name</th> */}\n                                <th>Email</th>\n                                <th>Profession</th>\n                                <th>Profile Pic</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                // this.state.courses.map(\n                                //     course =>\n                                        // <tr key={course.id}>\n                                        \n                                        <tr>\n                                            <td>{this.state.courses.username}</td>\n                                            <td>{this.state.courses.email}</td>\n                                            <td>{this.state.courses.profession}</td>\n                                            <td><img  src={this.state.pic} style={{width: 150, height: 250}} className='tc br3' /></td>\n                                        </tr>\n                                        \n                                // )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListCoursesComponent\n","import axios from 'axios'\n\nconst API_URL = 'http://localhost:8082'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        console.log('username ' + username);\n        console.log('password ' + password);\n        return axios.get(`${API_URL}/basicauth`,\n                   { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeUserService(username, password) {\n        return axios.get(`${API_URL}/userDetails`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        window.sessionStorage.setItem(\"username\", username);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()","import React, { Component } from 'react'\nimport AuthenticationService from '../service/AuthenticationService';\nimport Axios from 'axios';\n\nclass LoginComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: '',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false,\n            user:[]\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    loginClicked() {\n        //in28minutes,dummy\n        // if(this.state.username==='in28minutes' && this.state.password==='dummy'){\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/courses`)\n        //     //this.setState({showSuccessMessage:true})\n        //     //this.setState({hasLoginFailed:false})\n        // }\n        // else {\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // }\n\n        AuthenticationService\n            .executeBasicAuthenticationService(this.state.username, this.state.password)\n            .then(() => {\n                AuthenticationService.registerSuccessfulLogin(this.state.username, this.state.password)\n                AuthenticationService.executeUserService(this.state.username, this.state.password)\n                .then(\n                    response => {\n                        this.setState({user:response.data})\n                    }\n                )\n                \n\n                \n               console.log(this.state.user);\n                this.props.history.push(`/userdetails`)\n            }).catch(() => {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n\n        // AuthenticationService\n        //     .executeJwtAuthenticationService(this.state.username, this.state.password)\n        //     .then((response) => {\n        //         AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n        //         this.props.history.push(`/courses`)\n        //     }).catch(() => {\n        //         this.setState({ showSuccessMessage: false })\n        //         this.setState({ hasLoginFailed: true })\n        //     })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                    {/*<ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>*/}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                    {this.state.showSuccessMessage && <div>Login Sucessful</div>}\n                    {/*<ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/>*/}\n                    <tr>\n                    User Name : <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                    </tr><br>\n                    </br>\n                    <tr>\n                    Password :   <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                    </tr>\n                    <br></br>\n                    <tr>\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                    </tr>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent","import React, { Component } from 'react'\n\nclass LogoutComponent extends Component {\n    render() {\n        return (\n            <>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank You for Using Our Application.\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass MenuComponent extends Component {\n\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    {/* <div><a href=\"http://www.in28minutes.com\" className=\"navbar-brand\">ManjuUserApp</a></div> */}\n                    {/* <ul className=\"navbar-nav\">\n                        <li><Link className=\"nav-link\" to=\"/courses\">Courses</Link></li>\n                    </ul> */}\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default withRouter(MenuComponent)","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport AuthenticationService from '../service/AuthenticationService';\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        if (AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props} />\n        } else {\n            return <Redirect to=\"/login\" />\n        }\n\n    }\n}\n\nexport default AuthenticatedRoute","import React, { Component } from 'react';\nimport ListCoursesComponent from './ListCoursesComponent';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport LoginComponent from './LoginComponent';\nimport LogoutComponent from './LogoutComponent';\nimport MenuComponent from './MenuComponent';\nimport AuthenticationService from '../service/AuthenticationService';\nimport AuthenticatedRoute from './AuthenticatedRoute';\n\nclass InstructorApp extends Component {\n\n\n    render() {\n        return (\n            <>\n                <Router>\n                    <>\n                        <MenuComponent />\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent} />\n                            <Route path=\"/login\" exact component={LoginComponent} />\n                            <AuthenticatedRoute path=\"/logout\" exact component={LogoutComponent} />\n                            <AuthenticatedRoute path=\"/userdetails\" exact component={ListCoursesComponent} />\n                        </Switch>\n                    </>\n                </Router>\n            </>\n        )\n    }\n}\n\nexport default InstructorApp","import React, { Component } from 'react';\nimport './App.css';\nimport InstructorApp from './component/InstructorApp.jsx';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <InstructorApp />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}